name: Pull request
on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  lint:
    name: Lint content
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0 # Enable gitlint to check all PR commit messages

      - uses: cachix/install-nix-action@v18

      - uses: cachix/cachix-action@v12
        with:
          name: linz
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Cache pre-commit
        uses: actions/cache@v3.2.3
        with:
          path: ~/.cache/pre-commit
          key:
            ${{ secrets.CACHE_SEED }}-${{ hashFiles('.pre-commit-config.yaml')
            }}

      - name: Run pre-commit hooks
        run: nix-shell --pure --run 'pre-commit run --all-files'

      - name: Check all commit messages in Pull Request
        run:
          nix-shell --pure --run 'gitlint --commits origin/${{ github.base_ref
          }}..${{ github.event.pull_request.head.sha }}'

  test-nix:
    name: Test using Nix
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.3.0

      - uses: cachix/install-nix-action@v18

      - uses: cachix/cachix-action@v12
        with:
          name: linz
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Run test
        run:
          nix-shell --pure --run 'jupyter nbconvert --debug --execute --inplace
          --to=notebook sentinel2_water_extraction.ipynb'
        working-directory: flooding/sentinel2_water_extraction

  test-poetry:
    name:
      Test on ${{ matrix.runner }}, using Poetry with Python ${{ matrix.python
      }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner:
          - macos-12
          - ubuntu-22.04
          - windows-2022
        python:
          - "3.8"
          - "3.9"
          - "3.10"
        include:
          - runner: macos-12
            pip-cache-dir: ~/Library/Caches/pip
          - runner: ubuntu-22.04
            pip-cache-dir: ~/.cache/pip
          - runner: windows-2022
            pip-cache-dir: ~\AppData\Local\pip\Cache
        exclude:
          - runner: ubuntu-22.04
            python: "3.10" # https://github.com/ContinuumIO/anaconda-issues/issues/13122
    steps:
      - name: Check out repository
        uses: actions/checkout@v3.3.0

      - name: Use Python ${{ matrix.python }}
        id: setup-python
        uses: actions/setup-python@v4.5.0
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3.2.3
        with:
          path: ${{ matrix.pip-cache-dir }}
          key:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python
            }}-${{
            hashFiles('./flooding/sentinel2_water_extraction/poetry.lock') }}
          restore-keys:
            ${{ runner.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-

      - name: Install Poetry
        run: pip install --disable-pip-version-check --progress-bar=off poetry

      - name: Get GDAL Python package version
        run:
          echo "GDAL_VERSION=$(poetry show gdal | tr -d ' ' | grep '^version:' |
          cut -d ':' -f 2)" >> $GITHUB_ENV
        shell: bash
        working-directory: flooding/sentinel2_water_extraction

      - name: Setup Conda
        uses: s-weigand/setup-conda@v1.1.1
        with:
          conda-channels: conda-forge
          python-version: ${{ steps.setup-python.outputs.python-version }}

      - name: Get Conda info for debugging purposes
        run: conda info

      - name: Get Conda configuration for debugging purposes
        run: conda config --show-sources

      - name: Get Conda channel URLs for debugging purposes
        run: conda list --show-channel-urls

      - name: Install Conda environment packages
        run:
          conda install --channel=conda-forge --quiet --yes gdal=${{
          env.GDAL_VERSION }} poetry

      - name: Install Python packages on non-Windows runner
        run: poetry install --only=main --no-root
        working-directory: flooding/sentinel2_water_extraction
        if: ${{ !startsWith(runner.os, 'Windows') }}

      - name:
          Reinstall Python 3.10 on Windows runner (Workaround from
          https://github.com/nltk/nltk/issues/3027#issuecomment-1197689886)
        uses: nick-fields/retry@v2.8.3
        with:
          timeout_minutes: 9999 # Workaround for https://github.com/nick-fields/retry/issues/107
          max_attempts: 6
          command:
            conda install --channel=conda-forge --quiet --yes python=${{
            matrix.python }}
        if: ${{ startsWith(runner.os, 'Windows') && matrix.python == '3.10' }}

      - name:
          Install Python packages on Windows runner (Workaround for
          https://github.com/python-poetry/poetry/issues/1031)
        uses: nick-fields/retry@v2.8.3
        with:
          timeout_minutes: 9999 # Workaround for https://github.com/nick-fields/retry/issues/107
          max_attempts: 6
          command: cd flooding/sentinel2_water_extraction && poetry install
            --only=main --no-root # Workaround for https://github.com/python-poetry/poetry/issues/7363 / https://github.com/nick-fields/retry/issues/89
          shell: bash
        if: ${{ startsWith(runner.os, 'Windows') }}

      - name: Get Geopandas versions for debugging purposes
        run: poetry run python -c 'import geopandas; geopandas.show_versions()'
        working-directory: flooding/sentinel2_water_extraction

      - name: Run test
        run:
          poetry run jupyter nbconvert --debug --execute --inplace --to=notebook
          sentinel2_water_extraction.ipynb
        working-directory: flooding/sentinel2_water_extraction

  finalise:
    if: always()
    needs:
      - lint
      - test-nix
      - test-poetry
    runs-on: ubuntu-22.04
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}
